1
00:00:00,230 --> 00:00:01,730
现在 我们来看一下 Excel 文件

2
00:00:01,730 --> 00:00:04,300
在这里 我用作示例的数据是

3
00:00:04,300 --> 00:00:07,590
德州电力可靠性委员会的数据

4
00:00:07,590 --> 00:00:10,770
这是一个管理上百万德州用户用电流量的组织

5
00:00:10,770 --> 00:00:15,290
它们还会向公众提供

6
00:00:15,290 --> 00:00:19,250
很多有关供电量

7
00:00:19,250 --> 00:00:22,640
或其用户用电量的数据集

8
00:00:22,640 --> 00:00:25,240
这里的数据就是日历年2003年的数据

9
00:00:25,240 --> 00:00:28,690
很多组织都会发布这样的数据

10
00:00:28,690 --> 00:00:31,190
他们通常会以 Excel 的文件形式发布

11
00:00:31,190 --> 00:00:34,150
这意味着 我们需要知道

12
00:00:34,150 --> 00:00:36,510
如何以程序化模式处理 Excel 文件

13
00:00:36,510 --> 00:00:40,610
因为 在大多数情况下

14
00:00:40,610 --> 00:00:42,970
我们需要处理数十个 甚至数百个 Excel 格式的文件

15
00:00:42,970 --> 00:00:45,690
在这里 我要向你介绍

16
00:00:45,690 --> 00:00:50,490
名为 XLRD 的 python 模块

17
00:00:50,490 --> 00:00:55,910
XLRD 可以处理老式的 XLS 格式和新的XLSX 格式的 Excel 文件

18
00:00:55,910 --> 00:01:04,000
利用这个模块 我们可以载入 excel 工作薄中的所有数据

19
00:01:04,000 --> 00:01:08,410
并在 Python 程序中对其进行各种处理

20
00:01:08,410 --> 00:01:13,510
还有个名为 XLWT 模块

21
00:01:13,510 --> 00:01:15,520
如有需要

22
00:01:15,520 --> 00:01:18,600
我们可以利用它 以程序化模式创建 Excel 文件

23
00:01:18,600 --> 00:01:19,940
在浏览这个示例代码前

24
00:01:19,940 --> 00:01:22,790
我首先要运行它

25
00:01:22,790 --> 00:01:28,330
我对这个程序进行的处理就是

26
00:01:28,330 --> 00:01:30,700
使其生成的输出能够描述

27
00:01:30,700 --> 00:01:33,950
在使用 XRLD 处理 excel 数据时可能用到的功能

28
00:01:33,950 --> 00:01:37,640
我要说明的一点是

29
00:01:37,640 --> 00:01:40,580
我们应该怎样将 Excel 文件中的数据

30
00:01:40,580 --> 00:01:44,160
完全读取成 python 列表并对其进行处理

31
00:01:44,160 --> 00:01:47,880
我们要如何在 Excel 文件中

32
00:01:47,880 --> 00:01:51,380
利用 XLRD 模块处理行、列和单元格

33
00:01:51,380 --> 00:01:55,250
最后 我还要讲一下日期的问题

34
00:01:55,250 --> 00:01:57,830
主要是因为日期在 XML 中显示的形式各有不同

35
00:01:57,830 --> 00:02:00,240
所以 我们要讨论一下

36
00:02:00,240 --> 00:02:02,910
我们回头看一下这个代码

37
00:02:02,910 --> 00:02:05,860
这里 我们只设置了要载入的文件

38
00:02:05,860 --> 00:02:07,860
在这种情况下 载入的是 XLS 文件

39
00:02:07,860 --> 00:02:11,590
它是微软 Excel 文件的老版格式

40
00:02:11,590 --> 00:02:14,120
然后 我们要进行的部分工作其实已经在解析文件函数中完成了

41
00:02:14,120 --> 00:02:17,840
这是用来打开工作簿的命令

42
00:02:17,840 --> 00:02:19,620
注意 我们这里用的是同一个变量名

43
00:02:19,620 --> 00:02:23,090
然后 我们要设置有待处理的每个工作表

44
00:02:23,090 --> 00:02:26,430
所以 在这里 我们选择 工作表0

45
00:02:26,430 --> 00:02:31,150
你会发现 XLRD 的索引是建立在0的基础上的

46
00:02:31,150 --> 00:02:33,080
第一列其实是第0列

47
00:02:33,080 --> 00:02:36,330
第一行其实是第0行

48
00:02:36,330 --> 00:02:38,610
这里是列表解析的示例

49
00:02:38,610 --> 00:02:41,260
在这里

50
00:02:41,260 --> 00:02:46,220
我们其实是在遍历所有行和列

51
00:02:46,220 --> 00:02:51,460
并将所有数据读取成 Python 列表

52
00:02:51,460 --> 00:02:56,750
这里就是打出 我们刚刚生成列表中的

53
00:02:56,750 --> 00:02:59,720
第3行和第2列的值

54
00:02:59,720 --> 00:03:02,520
如果我把页面向下拉 可以看到

55
00:03:02,520 --> 00:03:06,210
在下一个列表解析代码中 我们是要遍历整个工作簿

56
00:03:06,210 --> 00:03:09,080
但每次只遍历一行 然后在列中进行移动

57
00:03:09,080 --> 00:03:11,500
我把代码设置为

58
00:03:11,500 --> 00:03:14,380
使其当我们遍历至第50行时

59
00:03:14,380 --> 00:03:17,200
就把这一行的所有值都打出来

60
00:03:17,200 --> 00:03:21,820
但每次只打一列

61
00:03:21,820 --> 00:03:24,230
这段代码只是在演示

62
00:03:24,230 --> 00:03:28,120
使用 XLRD 时

63
00:03:28,120 --> 00:03:31,560
你可能会用到的函数和方法

64
00:03:31,560 --> 00:03:34,580
在下一个示例代码中

65
00:03:34,580 --> 00:03:38,100
我要演示如何在 XLRD 中处理行和列

66
00:03:38,100 --> 00:03:40,510
在这里 我们要做的是

67
00:03:40,510 --> 00:03:43,100
取出这个工作表的行数

68
00:03:43,100 --> 00:03:47,000
然后把它打出来

69
00:03:47,000 --> 00:03:49,840
这里演示的是如何查看

70
00:03:49,840 --> 00:03:53,520
某一单元格的数据或值的类型

71
00:03:53,520 --> 00:03:56,440
这个要针对工作表 或类型工作表的对象

72
00:03:56,440 --> 00:04:00,570
使用单元格类型方法 然后 这是单元格的值

73
00:04:00,570 --> 00:04:02,820
它能以适当的 Python 值形式取出保存在这个单元格中的值

74
00:04:02,820 --> 00:04:05,570
无论这个值是浮点值还是其他值

75
00:04:05,570 --> 00:04:08,705
最后这个方法很棒

76
00:04:08,705 --> 00:04:12,790
在这里 我们可以将某一列中的值进行切片

77
00:04:12,790 --> 00:04:15,190
它的意思是

78
00:04:15,190 --> 00:04:18,010
比如 我想要这一列中的三个值

79
00:04:18,010 --> 00:04:21,519
从第一行开始取

80
00:04:21,519 --> 00:04:24,620
然后向下经过第1、第2和第3行

81
00:04:24,620 --> 00:04:28,300
一直到第四行 但不包括第四行

82
00:04:28,300 --> 00:04:30,960
我想取出这一列的这三个值

83
00:04:30,960 --> 00:04:35,530
然后我们要做的

84
00:04:35,530 --> 00:04:37,680
其实和这里差不多

85
00:04:37,680 --> 00:04:39,880
也就是检查该单元格中位数的类型

86
00:04:39,880 --> 00:04:43,210
在这种情况下 单元格里是日期

87
00:04:43,210 --> 00:04:47,350
所以 我们要取出单元格中的值

88
00:04:47,350 --> 00:04:49,430
事实上 在老式的 Excel 格式中

89
00:04:49,430 --> 00:04:54,510
日期直接显示为浮点数

90
00:04:54,510 --> 00:04:57,240
所以 我们可以利用 XLRD_date_as_tuple 的方法

91
00:04:57,240 --> 00:05:00,330
获得这个时间

92
00:05:00,330 --> 00:05:03,150
以使我们可以在 Python 中把它当作日期处理

93
00:05:03,150 --> 00:05:06,420
我们再来看一下输出结果

94
00:05:06,420 --> 00:05:10,080
这是我们的列表解析

95
00:05:10,080 --> 00:05:14,050
我们只是在所有数据读取成的列表中

96
00:05:14,050 --> 00:05:17,340
打出了第3行和第2列的值

97
00:05:17,340 --> 00:05:19,390
我们可以看到

98
00:05:19,390 --> 00:05:21,480
我遍历了所有行和列并打出了第50行的所有值

99
00:05:21,480 --> 00:05:24,760
这个工作表的行数是7200

100
00:05:24,760 --> 00:05:28,240
这里注意一下

101
00:05:28,240 --> 00:05:31,580
单元格2的数据类型为2

102
00:05:31,580 --> 00:05:34,150
如果有兴趣 你可以查看 XLRD 文件

103
00:05:34,150 --> 00:05:37,380
找出这些不同的类型标识分别代表什么

104
00:05:37,380 --> 00:05:40,480
在这里

105
00:05:40,480 --> 00:05:42,160
它代表浮点数

106
00:05:42,160 --> 00:05:47,040
可以看到 这里的值是1036 后面还有小数

107
00:05:47,040 --> 00:05:49,890
这里是第3列切片的输出结果

108
00:05:49,890 --> 00:05:53,470
这里是我们处理的日期部分

109
00:05:53,470 --> 00:05:57,090
XLRD 确实能辨别出这个单元格里有日期

110
00:05:57,090 --> 00:06:01,220
但这里的日期是用浮点数表示的

111
00:06:01,220 --> 00:06:03,890
我们要做的就是

112
00:06:03,890 --> 00:06:08,220
利用我告诉你的 XLRD 方法

113
00:06:08,220 --> 00:06:10,330
将它转换成 Python 日期元组

114
00:06:10,330 --> 00:06:13,200
这样以来 这个数据的表现形式就更符合我们的要求了

115
00:06:13,200 --> 00:06:15,580
在这里 我们得到的是第1行和第0列

116
00:06:15,580 --> 00:06:18,560
也就是最上方的第一个单元格

117
00:06:18,560 --> 00:06:21,890
就是这个 注意 我们取出作为值的数据

118
00:06:21,890 --> 00:06:27,310
其实是2013年1月1日上午1点
