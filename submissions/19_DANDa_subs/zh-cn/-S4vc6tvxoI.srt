1
00:00:00,320 --> 00:00:02,060
我们先讨论一下 CSV 文件

2
00:00:02,060 --> 00:00:06,236
我说过 字段是由逗号分隔开的

3
00:00:06,236 --> 00:00:10,400
那如果有一个字段值中含有逗号

4
00:00:10,400 --> 00:00:14,020
比如这一个 我们应该怎么办呢？

5
00:00:14,020 --> 00:00:16,880
披头士的这个唱片是在两个不同的唱片公司下发行的

6
00:00:16,880 --> 00:00:19,250
一个是新西兰的 一个是美国的

7
00:00:19,250 --> 00:00:22,470
在这个数据集中 这两个不同的唱片公司是直接用逗号分开的

8
00:00:22,470 --> 00:00:26,050
根据我们目前掌握的 CSV 相关知识

9
00:00:26,050 --> 00:00:27,440
或者说 我们目前在这节课中讨论过的 CSV 知识 10 

10
00:00:27,440 --> 00:00:30,820
这就会造成一定的问题

11
00:00:30,820 --> 00:00:34,890
因为 我们的解析器会把它当作字段的分隔符

12
00:00:34,890 --> 00:00:38,390
通常情况下 CSV 格式处理它的方法

13
00:00:38,390 --> 00:00:41,210
或者说 处理 CSV 格式的大多数应用

14
00:00:41,210 --> 00:00:44,480
处理它的方法是这样的

15
00:00:44,480 --> 00:00:47,400
可以看到 在 CSV 文件中 这个字段其实是这样的

16
00:00:47,400 --> 00:00:51,220
在这里我只是把它载入 Google 表格中

17
00:00:51,220 --> 00:00:54,770
原来的 CSV 文件是这样的

18
00:00:54,770 --> 00:00:57,475
你可以看到 

19
00:00:57,475 --> 00:01:00,700
在这里 这一行的这个字段加上了引号

20
00:01:00,700 --> 00:01:04,775
它的意思就是

21
00:01:04,775 --> 00:01:08,650
你可以忽略从这里到这里的分隔符

22
00:01:08,650 --> 00:01:11,920
在使用引号时 我们可以选择使用双引号

23
00:01:11,920 --> 00:01:14,030
你也可以使用单引号

24
00:01:14,030 --> 00:01:16,670
但这还会造成另一个问题

25
00:01:16,670 --> 00:01:19,190
可以看到 这里有一个单引号

26
00:01:19,190 --> 00:01:22,330
这里也有一个引号

27
00:01:22,330 --> 00:01:24,880
它是专辑名 Sgt Pepper's Lonely Hearts Club Band 中的省字符

28
00:01:24,880 --> 00:01:28,990
所以 如果我们需要在 Python 程序中

29
00:01:28,990 --> 00:01:31,820
处理所有各不相同的此类符号 

30
00:01:31,820 --> 00:01:35,230
这个工作量很大 而且很无聊

31
00:01:35,230 --> 00:01:38,620
事实上 虽然我们称其为 CSV 即逗号分隔值

32
00:01:38,620 --> 00:01:41,990
但只要你使用的符号仅作为数据集中行的字段分隔符

33
00:01:41,990 --> 00:01:45,680
任何符号都可以被用作分隔符

34
00:01:45,680 --> 00:01:47,640
所以 在软件开发中

35
00:01:47,640 --> 00:01:51,490
对于在处理有多种变体

36
00:01:51,490 --> 00:01:54,611
或者 用我朋友 Will Cross 的话说 有多个星号的 CSV文件

37
00:01:54,611 --> 00:01:58,380
我们所需要处理的这些形式和细节问题 38 

38
00:01:58,380 --> 00:02:02,044
已被抽象化并予以解决

39
00:02:02,044 --> 00:02:07,360
这就是 Python 的 CSV 模块

40
00:02:07,360 --> 00:02:12,140
这个模块几乎可以从各个方面处理 CSV 格式

41
00:02:12,140 --> 00:02:14,790
让我们看看如何使用这个模块

42
00:02:14,790 --> 00:02:18,100
我要做的是 使用这个模块中的 DictReader

43
00:02:18,100 --> 00:02:22,200
这就是假定

44
00:02:22,200 --> 00:02:25,550
我们的任务就是将数据读取为字典

45
00:02:25,550 --> 00:02:27,590
我们的目的确实如此

46
00:02:27,590 --> 00:02:30,060
这也是我们在后半节课要做的事情

47
00:02:30,060 --> 00:02:32,980
但它也有其他的功能

48
00:02:32,980 --> 00:02:35,150
例如 它假定在我们要读取的文件中

49
00:02:35,150 --> 00:02:38,300
第一行就是标题行

50
00:02:38,300 --> 00:02:42,300
而且 这些就是我们作为字段的名称

51
00:02:42,300 --> 00:02:45,480
回到 CSV 文件 中 如果我把它拉到最上面

52
00:02:45,480 --> 00:02:49,470
我们可以看到 第一行其实就是

53
00:02:49,470 --> 00:02:51,730
我们针对该数据集的列或字段

54
00:02:51,730 --> 00:02:53,660
所要使用所有字段标签

55
00:02:53,660 --> 00:02:58,080
那么 这个字典读取器的作用就是

56
00:02:58,080 --> 00:03:00,340
在读取行的同时 为每行创建一个字典

57
00:03:00,340 --> 00:03:04,340
字段名称就是它在第一行中找到的名称

58
00:03:04,340 --> 00:03:06,770
它会在读取数据文件的过程中

59
00:03:06,770 --> 00:03:10,730
记住这些名称

60
00:03:10,730 --> 00:03:13,520
而值就是文件各行的各个相关值

61
00:03:13,520 --> 00:03:16,710
它也会处理引号

62
00:03:16,710 --> 00:03:20,380
以及带有引号、内部可能有逗号的字段 等等

63
00:03:20,380 --> 00:03:23,130
在使用 CSV 文件时

64
00:03:23,130 --> 00:03:27,090
我们完全不用考虑这些问题

65
00:03:27,090 --> 00:03:29,100
让我们看一下代码的剩余部分

66
00:03:29,100 --> 00:03:33,480
实际上 我们就是在打开数据文件

67
00:03:33,480 --> 00:03:36,410
我们将 CSV 模块中的 DictReader 实例化 然后直接遍历

68
00:03:36,410 --> 00:03:38,830
每次遍历 这个等级都会生成一行数据

69
00:03:38,830 --> 00:03:42,110
这一行数据就是一个

70
00:03:42,110 --> 00:03:46,320
由该行中的适当字段构成的字典

71
00:03:46,320 --> 00:03:48,250
所以 如果我们把页面拉下来

72
00:03:48,250 --> 00:03:51,480
在这里 我直接把所有值打出来

73
00:03:51,480 --> 00:03:53,390
我们看一下这个代码的运行情况

74
00:03:53,390 --> 00:03:57,610
记住 我们使用的是 CSV 模块

75
00:03:57,610 --> 00:03:59,800
如果我运行它 我们直接看一下第二行到最后一行

76
00:03:59,800 --> 00:04:03,210
它的输出是

77
00:04:03,210 --> 00:04:06,910
由这个文件第一行中的每个标签构成的字典

78
00:04:06,910 --> 00:04:10,090
以及数据文件中这一行

79
00:04:10,090 --> 00:04:13,250
所有字段的字段值

80
00:04:13,250 --> 00:04:16,180
它会直接替我们处理

81
00:04:16,180 --> 00:04:18,399
某些行中可能带引号的字段

82
00:04:18,399 --> 00:04:21,519
以及 CSV 格式可能出现的其他问题

83
00:04:21,519 --> 00:04:26,040
它会直接将各项数据放置在字典中

84
00:04:26,040 --> 00:04:30,260
所以 当你在 Python 中处理 CSV 文件时

85
00:04:30,260 --> 00:04:33,700
最好是使用 CSV 模块

86
00:04:33,700 --> 00:04:35,100
因为它可以替我们解决

87
00:04:35,100 --> 00:04:37,010
处理这类数据时可能遇到的很多难题
