1
00:00:00,270 --> 00:00:02,450
在设计 XML 时 设计师心中有多个目标

2
00:00:02,450 --> 00:00:05,090
就本课而言 最重要的一点是  

3
00:00:05,090 --> 00:00:08,340
设计它的目的是提供不依赖平台的数据转移   

4
00:00:08,340 --> 00:00:12,120
这是什么意思？主要想法就是

5
00:00:12,120 --> 00:00:14,740
你可以有一个生产者应用   

6
00:00:14,740 --> 00:00:18,390
它以任何编程语言在任何操作系统上  

7
00:00:18,390 --> 00:00:21,090
和任何类型的硬件上编写 还有一个消费者应用

8
00:00:21,090 --> 00:00:25,660
该应用是以任何其它编程语言操作系统或硬件实现的 

9
00:00:25,660 --> 00:00:28,710
消费者应用或生产者应用

10
00:00:28,710 --> 00:00:31,580
之间没有任何绑定 因为它们都采用 XML   

11
00:00:31,580 --> 00:00:33,970
和对方通信 当然

12
00:00:33,970 --> 00:00:36,767
除了使用生产者应用发出的 XML 外 

13
00:00:36,767 --> 00:00:40,040
消费者还可以编写 XML 给生产者应用

14
00:00:41,140 --> 00:00:43,140
XML 的另一个重要目标是 

15
00:00:43,140 --> 00:00:47,030
可方便地编写读写 XML 的程序

16
00:00:47,030 --> 00:00:51,370
设计师同样还希望数据格式是可以验证的  

17
00:00:51,370 --> 00:00:54,160
那么在 XML 中 我们编写一个针对特定文档类型的规范   

18
00:00:54,160 --> 00:00:58,180
然后就可以根据该规范 

19
00:00:58,180 --> 00:01:00,500
来对所生成的该文档的任何其它示例 

20
00:01:00,500 --> 00:01:05,540
进行验证 BioMed Central 对于

21
00:01:05,540 --> 00:01:08,020
研究论文格式有一个规范 所生成的任何论文都要按照该规范  

22
00:01:08,020 --> 00:01:11,340
进行验证  

23
00:01:11,340 --> 00:01:14,250
以确保其符合该数据模型的规则 

24
00:01:14,250 --> 00:01:16,450
XML 是为便于人工阅读而设计的   

25
00:01:16,450 --> 00:01:18,750
正如我们在例子中看到的 我们一看便可对 

26
00:01:18,750 --> 00:01:22,480
XML 编码所含的内容    

27
00:01:22,480 --> 00:01:25,740
有很直观的了解 最后 XML 也是为  

28
00:01:25,740 --> 00:01:28,780
支持各种应用而设计的  

29
00:01:28,780 --> 00:01:31,080
我们已经看到了 XML 的一种应用 接下来 

30
00:01:31,080 --> 00:01:34,510
还会看到其它一些应用 这些应用基本上包含了一些方式  

31
00:01:34,510 --> 00:01:37,400
在这些方式中 可运用 XML 来交换应用之间的数据  

32
00:01:37,400 --> 00:01:41,800
如果大家对这种数据格式有更多兴趣   

33
00:01:41,800 --> 00:01:43,490
鼓励大家看看 

34
00:01:43,490 --> 00:01:46,450
W3C 网站 我们接下来谈谈  

35
00:01:46,450 --> 00:01:50,170
拥有一套标准意味着什么 拥有一套 XML 标准的  

36
00:01:50,170 --> 00:01:52,700
最大好处就是 

37
00:01:52,700 --> 00:01:57,050
在大多数编程语言中 都有强有力的解析器 包括 Python  

38
00:01:57,050 --> 00:02:00,040
这对我们这些数据科学家来说 意味着 

39
00:02:00,040 --> 00:02:02,430
我们可以专注于自己的应用  

40
00:02:02,430 --> 00:02:07,020
我们无需为编写一些特定数据格式的解析器操心   

41
00:02:07,020 --> 00:02:10,460
以前 每种消息传递系统都有自己的格式  

42
00:02:10,460 --> 00:02:12,580
这些格式各不相同 这使得我们处理的信息类型    

43
00:02:12,580 --> 00:02:15,360
显得非常混乱  

44
00:02:15,360 --> 00:02:18,720
复杂 而且代价高昂 如果大家都使用相同的语法   

45
00:02:18,720 --> 00:02:21,520
编写这些系统的速度就会快很多  

46
00:02:21,520 --> 00:02:25,520
也可靠很多 XML 的另一个优势是  

47
00:02:25,520 --> 00:02:28,800
它是免费的 它是免费软件

48
00:02:28,800 --> 00:02:32,190
并且也不会有什么法律障碍  

49
00:02:32,190 --> 00:02:37,700
其格式并未为任何一家公司所有 我们可以去更改它 

50
00:02:37,700 --> 00:02:40,830
XML 信息可以以编程方式操纵  

51
00:02:40,830 --> 00:02:45,020
我们可以构建数据库来支持特定类型的查询  

52
00:02:45,020 --> 00:02:47,890
也可以把来自不同来源的数据拼接到一起  

53
00:02:47,890 --> 00:02:49,920
或者分解为不同部分  

54
00:02:49,920 --> 00:02:53,400
以不同方式进行再利用 XML 文档还可以可靠的方式 

55
00:02:53,400 --> 00:02:56,280
转换为其它格式 而不会有信息丢失 

56
00:02:57,710 --> 00:03:01,010
XML 让你可以从内容中隔离出表格或外观

57
00:03:01,010 --> 00:03:04,070
因此 你的 XML 文件包含你的文档信息  

58
00:03:04,070 --> 00:03:06,990
你所有的文本  

59
00:03:06,990 --> 00:03:11,660
数据和标识符 并识别其结构 

60
00:03:11,660 --> 00:03:14,060
格式设置及其它处理需求是通过样式表   

61
00:03:14,060 --> 00:03:17,890
或其它处理系统单独识别的 

62
00:03:17,890 --> 00:03:23,000
在 BoiMed Central 的例子中 实际是转换为 HTML 的 XML

63
00:03:23,000 --> 00:03:29,070
这样便于在网站上渲染 或者采用样式表和样式表处理系统  

64
00:03:29,070 --> 00:03:32,970
转为 PDF 进行下载 这两者在输出时结合到一起    

65
00:03:32,970 --> 00:03:37,490
以便将所需的格式设置应用到其结构所识别的数据中的文本 

66
00:03:37,490 --> 00:03:40,730
该结构可以定义位置、顺序  

67
00:03:40,730 --> 00:03:42,690
或数据的任何其它方面 
