1
00:00:00,140 --> 00:00:02,110
如果你对 XML 还没有熟悉到如数家珍 我们就花点时间

2
00:00:02,110 --> 00:00:05,030
谈一谈语法 即使你对它已经比较熟悉  

3
00:00:05,030 --> 00:00:07,410
再稍微复习复习也会很有意义 

4
00:00:07,410 --> 00:00:11,820
在 XML 中 元素就是构成 XML 文档的基本积木块 

5
00:00:11,820 --> 00:00:16,540
一个 XML 元素含有

6
00:00:16,540 --> 00:00:20,510
一个开始标记和一个结束标记  

7
00:00:20,510 --> 00:00:22,930
这是从《纽约时报》API 开发者处摘录的一些数据   

8
00:00:22,930 --> 00:00:26,070
鼓励大家看看这个网站   

9
00:00:26,070 --> 00:00:28,380
我们要来看一些从最受欢迎的 API 处获得的数据  

10
00:00:28,380 --> 00:00:32,940
比如 这些是《纽约时报》读者 用电子邮件

11
00:00:32,940 --> 00:00:35,870
发送最多的文章 

12
00:00:35,870 --> 00:00:39,340
我们来看几个例子 对于这个文档

13
00:00:39,340 --> 00:00:42,090
我们可能首先会注意到的是  

14
00:00:42,090 --> 00:00:45,810
有一些 num 结果的标记 或者  

15
00:00:45,810 --> 00:00:48,540
与结果数相关的一些元素

16
00:00:48,540 --> 00:00:51,100
这个实际是一个结果集 它来自一次  

17
00:00:51,100 --> 00:00:54,490
针对最受欢迎的 API 的查询 并且我们得到了一个元素  

18
00:00:54,490 --> 00:00:56,890
该元素告诉我们 通过我们的查询 识别出了多少结果 

19
00:00:56,890 --> 00:01:00,160
接下来是结果列表

20
00:01:00,160 --> 00:01:03,630
这里凑巧是一个单一的结果

21
00:01:03,630 --> 00:01:05,590
我们可以看到该结果从这里开始

22
00:01:05,590 --> 00:01:09,910
从这个开始标记开始 然后到这个  

23
00:01:09,910 --> 00:01:13,530
结束标记结束 好 再来看看

24
00:01:13,530 --> 00:01:16,280
这条结论中数据的另外几个例子  

25
00:01:16,280 --> 00:01:18,830
我们可以看看署名栏 注意

26
00:01:18,830 --> 00:01:21,310
它也带有一个结束标记 还有一些

27
00:01:21,310 --> 00:01:24,180
其它元素 如果你注意这个标题的话会发现   

28
00:01:24,180 --> 00:01:28,760
它正好是一篇有关臭虫的文章 那么 这个例子

29
00:01:28,760 --> 00:01:31,560
所用的名字非常棒 我们知道这些代表什么   

30
00:01:31,560 --> 00:01:35,690
现在 我们要了解 XML 的一个需要特别关注的方面  

31
00:01:35,690 --> 00:01:38,280
因为我们将要做的一些练习会用到  

32
00:01:38,280 --> 00:01:41,660
这个稍后说 这些与 XML 元素的属性有关   

33
00:01:41,660 --> 00:01:45,770
看这里 这个文档提供给了很多 

34
00:01:45,770 --> 00:01:49,780
XML 中元素的很好的例子 不过这里缺乏的是  

35
00:01:49,780 --> 00:01:53,000
与所用的这些元素的属性相关的例子  

36
00:01:53,000 --> 00:01:56,080
所以我要做的就是 

37
00:01:56,080 --> 00:01:58,220
主要谈一谈我们将要看到的两种类型的数据   

38
00:01:58,220 --> 00:02:01,130
它们是在 XML 中编码的

39
00:02:01,130 --> 00:02:04,140
一个是较为面向文档的 XML 类型  

40
00:02:04,140 --> 00:02:07,450
这种类型最初是 XML 用来编码的数据类型  

41
00:02:07,450 --> 00:02:09,520
不过现在我们仍然可以看看  

42
00:02:09,520 --> 00:02:12,970
类似的数据 看 这是来自 OpenStreetMap 项目的实际数据  

43
00:02:12,970 --> 00:02:16,300
这是 OpenStreetMap 中西贝尔蒙特大道     

44
00:02:16,300 --> 00:02:19,295
的较近距离视角图  

45
00:02:19,295 --> 00:02:22,790
尤其是1000号街区 大家可以在这里看到   

46
00:02:22,790 --> 00:02:25,590
有一家 Giardano's 餐厅 Giardano's 是芝加哥的一家  

47
00:02:25,590 --> 00:02:29,330
著名的匹萨连锁餐厅 该数据主要来自于   

48
00:02:29,330 --> 00:02:33,280
该地图基础上的一个图层  

49
00:02:33,280 --> 00:02:35,650
该数据是人为创造的    

50
00:02:35,650 --> 00:02:39,080
事实上是 OpenStreetMap 的用户在地图数据的基础上添加了这个数据  

51
00:02:39,080 --> 00:02:44,200
这里我想要指出的是 这个数据

52
00:02:44,200 --> 00:02:48,750
非常的“不面向文档” 它只是数据 知道吗？

53
00:02:48,750 --> 00:02:50,680
大家很多时候都会看到 HTML 以这种方式使用   

54
00:02:50,680 --> 00:02:54,900
你会看到属性被大量应用   

55
00:02:54,900 --> 00:02:58,500
那么在这个例子中 这个节点代表的是  

56
00:02:58,500 --> 00:03:00,650
Giordano's 餐厅 我们可以看到  

57
00:03:00,650 --> 00:03:03,880
这里有很多针对这个元素的属性 

58
00:03:03,880 --> 00:03:07,450
它们都具有经度和纬度属性  

59
00:03:07,450 --> 00:03:10,870
这些属性都适用于这条注释 因此 基本上  

60
00:03:10,870 --> 00:03:13,920
这个数据元素提供的是地理坐标  

61
00:03:13,920 --> 00:03:19,740
到更为常用的街道地址坐标的映射 对吧？ 

62
00:03:19,740 --> 00:03:22,000
因此 这是个 XML 中属性的很好的例子  

63
00:03:22,000 --> 00:03:23,650
我还想要指出一点   

64
00:03:23,650 --> 00:03:26,970
就是标签的类型  

65
00:03:26,970 --> 00:03:30,050
在该数据中 它们会做一些   

66
00:03:30,050 --> 00:03:31,710
我可能不会做的事情 不过作为数据科学家   

67
00:03:31,710 --> 00:03:34,390
你将来会看到这类东西 或许你们已经看到了    

68
00:03:34,390 --> 00:03:36,620
基本上 它们已经具备有一系列关键值对   

69
00:03:36,620 --> 00:03:40,360
这些关键值对被编码在所谓的标签元素中   

70
00:03:40,360 --> 00:03:43,740
在该情况下 这些标签元素都不具备  

71
00:03:43,740 --> 00:03:48,740
结束标签 相反 它们采用这种特殊的 xml 语法  

72
00:03:48,740 --> 00:03:51,330
你可以仅创建出所谓的空标签 

73
00:03:51,330 --> 00:03:54,120
即没有内容的标签    

74
00:03:54,120 --> 00:03:56,590
这种类型的标签的所有数据  

75
00:03:56,590 --> 00:04:00,370
是直接包含在其属性中的 这个电子邮件中使用最多的例子    

76
00:04:00,370 --> 00:04:04,100
是一个很好的面向文档的

77
00:04:04,100 --> 00:04:08,650
元素中含很多内容的 XML 的例子     

78
00:04:08,650 --> 00:04:12,050
这个 OpenStreetMap 项目中的例子告诉我们  

79
00:04:12,050 --> 00:04:13,880
光谱的另一端是非常面向数据的 XML 

80
00:04:13,880 --> 00:04:18,880
其中所有或几乎所有数据   

81
00:04:18,880 --> 00:04:23,070
都包含在单个元素的属性中  

82
00:04:23,070 --> 00:04:26,660
在这种情况下 你看到的 XML 数据中 大多数会是空元素 

83
00:04:26,660 --> 00:04:29,240
或者至少很多都是空元素  
