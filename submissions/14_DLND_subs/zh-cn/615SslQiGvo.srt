1
00:00:00,000 --> 00:00:02,350
现在我将介绍

2
00:00:02,350 --> 00:00:06,925
如何从这个 VGG 网络中获取

3
00:00:06,924 --> 00:00:08,533
这些卷积码

4
00:00:08,534 --> 00:00:10,200
我们将从这个花朵数据集中

5
00:00:10,199 --> 00:00:12,139
获取每个图片

6
00:00:12,140 --> 00:00:15,970
并传入卷积层进行运行

7
00:00:15,970 --> 00:00:19,730
从第一个完全连接的层级中获取代码

8
00:00:19,730 --> 00:00:21,670
这是从 TensorFlow VGG 源代码中

9
00:00:21,670 --> 00:00:24,010
复制的一段代码

10
00:00:24,010 --> 00:00:26,330
该网络获取一个

11
00:00:26,329 --> 00:00:29,739
244 x 244 x 3 的图片

12
00:00:29,739 --> 00:00:32,739
并对其运行这个卷积层

13
00:00:32,740 --> 00:00:35,270
我们有两个卷积层

14
00:00:35,270 --> 00:00:38,340
最大池化 两个卷积层 最大池化

15
00:00:38,340 --> 00:00:41,092
然后三个卷积层 然后三个 然后三个

16
00:00:41,091 --> 00:00:42,549
最终

17
00:00:42,549 --> 00:00:43,959
得出完全连接的层级

18
00:00:43,960 --> 00:00:47,740
并传入 ReLU 激活函数

19
00:00:47,740 --> 00:00:53,170
我们实际上想获得这些值

20
00:00:53,170 --> 00:00:58,466
这个网络使用这些 ReLU 进行训练

21
00:00:58,466 --> 00:01:00,340
当我们获得卷积码后

22
00:01:00,340 --> 00:01:01,970
我们还想使用这些 ReLU

23
00:01:01,969 --> 00:01:03,890
改善效果

24
00:01:03,890 --> 00:01:06,650
构建网络很直观

25
00:01:06,650 --> 00:01:09,160
创建这个 VGG 对象

26
00:01:09,159 --> 00:01:14,558
并创建输入占位符 然后是 vgg.build

27
00:01:14,558 --> 00:01:16,849
该函数负责构建网络

28
00:01:16,849 --> 00:01:19,089
在 TensorFlow 中构建图表

29
00:01:19,090 --> 00:01:20,380
然后稍后使用

30
00:01:20,379 --> 00:01:22,462
我发现这个只需构建一次

31
00:01:22,462 --> 00:01:26,349
如果多次运行 vgg.build

32
00:01:26,349 --> 00:01:29,259
就会将所有这些节点不断添加到图表上

33
00:01:29,260 --> 00:01:30,880
最终出现太多的节点

34
00:01:30,879 --> 00:01:34,929
在这个记事本中

35
00:01:34,930 --> 00:01:38,050
确保整个过程中只运行 vgg.build 一次

36
00:01:38,049 --> 00:01:39,549
否则就会出现错误

37
00:01:39,549 --> 00:01:43,000
你需要重启记事本

38
00:01:43,000 --> 00:01:47,560
构建好网络和图表后

39
00:01:47,560 --> 00:01:50,950
然后我们需要从

40
00:01:50,950 --> 00:01:54,230
这个层级“relu6”中获取卷积码

41
00:01:54,230 --> 00:01:57,280
执行 sess.run relu6

42
00:01:57,280 --> 00:02:00,519
向其提供图片字典并获得卷积码

43
00:02:00,519 --> 00:02:05,004
这部分很简单

44
00:02:05,004 --> 00:02:07,019
但是当你真的去编写代码完成所有这些过程时

45
00:02:07,019 --> 00:02:09,008
实际上需要花点功夫才能都设置

46
00:02:09,008 --> 00:02:09,639
正确

47
00:02:09,639 --> 00:02:11,347
我将提供大部分代码

48
00:02:11,347 --> 00:02:13,219
但是需要你实现这部分

49
00:02:13,219 --> 00:02:15,800
以及获得卷积码部分

50
00:02:15,800 --> 00:02:18,840
这里导入各个内容

51
00:02:18,840 --> 00:02:21,969
utils 来自 tensorflow_vgg

52
00:02:21,969 --> 00:02:25,900
其中包含一些很实用的函数

53
00:02:25,900 --> 00:02:27,189
例如加载图片 等等

54
00:02:27,189 --> 00:02:30,340
这里是加载数据

55
00:02:30,340 --> 00:02:33,670
我们的数据位于 flower_photos

56
00:02:33,669 --> 00:02:36,699
然后是每个图片

57
00:02:36,699 --> 00:02:39,250
每个类 有 5 个不同的类

58
00:02:39,250 --> 00:02:42,139
向日葵 雏菊 玫瑰 等等

59
00:02:42,139 --> 00:02:44,109
我列出了

60
00:02:44,110 --> 00:02:47,470
数据字典中的所有内容

61
00:02:47,469 --> 00:02:50,109
并获得类

62
00:02:50,110 --> 00:02:52,940
下面这段代码将由你来实现

63
00:02:52,939 --> 00:02:57,079
首先 你将构建 VGG 网络

64
00:02:57,080 --> 00:02:59,410
你将初始化类

65
00:02:59,409 --> 00:03:01,599
并构建类

66
00:03:01,599 --> 00:03:03,340
在下面

67
00:03:03,340 --> 00:03:06,759
你将从 relu6 层级中获取卷积码

68
00:03:06,759 --> 00:03:08,620
这段代码的运行原理是

69
00:03:08,620 --> 00:03:11,710
你实际上对网络

70
00:03:11,710 --> 00:03:12,770
运行批次

71
00:03:12,770 --> 00:03:15,310
查看每个文件

72
00:03:15,310 --> 00:03:19,449
将图片附到一些批次上

73
00:03:19,449 --> 00:03:23,049
然后将批次连结到图片数组中

74
00:03:23,050 --> 00:03:24,730
你可以传入图片

75
00:03:24,729 --> 00:03:28,569
或者将图片提供给 VGG 网络

76
00:03:28,569 --> 00:03:31,000
并获得 relu6 卷积码

77
00:03:31,000 --> 00:03:33,560
我们在这里加载图片

78
00:03:33,560 --> 00:03:36,189
这部分的作用是

79
00:03:36,189 --> 00:03:40,060
我们的图片不是 244 x 244

80
00:03:40,060 --> 00:03:43,390
即网络希望具有的尺寸

81
00:03:43,389 --> 00:03:46,409
所以这部分的作用是剪裁出图片中心部分

82
00:03:46,409 --> 00:03:49,009
如果图片大于 244 x 244

83
00:03:49,009 --> 00:03:52,579
那么就会从中心剪裁 获得该大小的图片

84
00:03:52,580 --> 00:03:55,420
也有其他实现方法 也许更好

85
00:03:55,419 --> 00:03:58,629
你可以将原始图片缩小为

86
00:03:58,629 --> 00:04:03,009
期望的尺寸 或者通过其他方式

87
00:04:03,009 --> 00:04:07,299
将原始图片（输入图片）

88
00:04:07,300 --> 00:04:09,630
变成网络希望的形状

89
00:04:09,629 --> 00:04:11,079
如果你要进行迁移学习

90
00:04:11,080 --> 00:04:13,120
基本上都会遇到这种情形

91
00:04:13,120 --> 00:04:16,300
因为所有这些卷积网络

92
00:04:16,300 --> 00:04:20,230
都根据一些原始尺寸的图片进行训练

93
00:04:20,230 --> 00:04:23,140
当你进行迁移学习时

94
00:04:23,139 --> 00:04:24,740
需要使用相同的尺寸

95
00:04:24,740 --> 00:04:27,879
我觉得缩小图片很常见

96
00:04:27,879 --> 00:04:30,399
这里我直接裁剪

97
00:04:30,399 --> 00:04:33,009
并且效果很好

98
00:04:33,009 --> 00:04:36,129
但是如果你缩小图片的话 可能更好

99
00:04:36,129 --> 00:04:39,370
我将请你构建这里的网络

100
00:04:39,370 --> 00:04:42,550
填写这些代码 并填写下面的代码

101
00:04:42,550 --> 00:04:43,480
加油

102
00:04:43,480 --> 00:04:46,540
如果遇到问题

103
00:04:46,540 --> 00:04:48,520
或者想要看看我是如何实现的

104
00:04:48,519 --> 00:04:51,029
可以观看我的解决方案视频
