1
00:00:00,260 --> 00:00:02,360
所以要弄清楚当我们运行这行代码

2
00:00:02,360 --> 00:00:04,910
会发生什么 我们得赶紧

3
00:00:04,910 --> 00:00:07,180
倒回去 看看我们之前画图的

4
00:00:07,180 --> 00:00:10,570
那堂课 现在 你可以将类想象成

5
00:00:10,570 --> 00:00:13,940
一个精心打包的包装盒 里面所有的东西

6
00:00:13,940 --> 00:00:17,602
井然有序地收集在一起 它允许我们写出这样的代码

7
00:00:17,602 --> 00:00:21,860
就像 turtle.Turtle 后面跟着奇怪的括号 看起来似乎我们在

8
00:00:21,860 --> 00:00:25,870
调用函数 实际上 当我们运行这样一条代码时 

9
00:00:25,870 --> 00:00:28,210
我们确实是在调用一个函数 一个

10
00:00:28,210 --> 00:00:32,590
叫做 init 的函数 在类 Turtle 中进行了定义

11
00:00:32,590 --> 00:00:35,530
Init 代表 initialization (初始化) 它的功能是在

12
00:00:35,530 --> 00:00:38,480
内存中为类 Turtle 的一个新实例或

13
00:00:38,480 --> 00:00:41,470
新对象创建空间 这个实例 我们

14
00:00:41,470 --> 00:00:44,010
称之为 brad 现在我们又回到

15
00:00:44,010 --> 00:00:47,310
当前的任务 首先 我们来定义一个

16
00:00:47,310 --> 00:00:49,800
名称为 media.py 的文件 我们把它放上来 

17
00:00:51,360 --> 00:00:54,540
注意 我把它放在了 Python 标准库之外

18
00:00:54,540 --> 00:00:58,920
在这个文件内 我们又定义一个叫 Movie 的类 

19
00:01:01,520 --> 00:01:03,360
然后 我们写了一行代码 

20
00:01:03,360 --> 00:01:07,610
内容是 media.Movie 它的功能是

21
00:01:07,610 --> 00:01:10,380
调用类 Movie 中定义的 init 函数 

22
00:01:10,380 --> 00:01:14,590
这就创建了一个新的实例 这个实例

23
00:01:14,590 --> 00:01:17,820
命名为 toy_story 总结一下 这个

24
00:01:17,820 --> 00:01:21,530
函数 init 将新实例 toy_story 初始化 为它

25
00:01:21,530 --> 00:01:24,150
创建了空间和内存 顺道说一句

26
00:01:24,150 --> 00:01:27,330
这个新函数 init 也叫做构造函数 

27
00:01:27,330 --> 00:01:29,810
因为它可以为新实例构造空间和内存 

28
00:01:29,810 --> 00:01:32,630
在这个例子中 实例就是 toy_story

29
00:01:32,630 --> 00:01:35,510
到目前为止 我们遇到了两个新词 

30
00:01:35,510 --> 00:01:38,710
我们可以将它们添加到新词列表中 第一个是

31
00:01:38,710 --> 00:01:41,470
“实例” 在这里指代的是 toy_story

32
00:01:41,470 --> 00:01:44,650
第二个是“构造函数” 在这里

33
00:01:44,650 --> 00:01:47,560
则是 init 函数 我们很快

34
00:01:47,560 --> 00:01:51,215
会再用到这些词 不过现在 我们先来定义 init 
